Pregunta 18: 
     muestra por pantalla el literal 'Hola Mundo'.

Pregunta 21:
     "\t\n" inserta un tabulado y un salto de linea
     '\t\n' muestra por pantalla el literal '\t\n'

Pregunta 22:
        transforma el interior de los corchetes en cadenas de texto 

Pregunta 23:
        

Pregunta 24:
      en c queda: 
           --4--
           --2--
           => nil	
      Tenemos la definicion de un array multilinea y al mostrarlo sustituye los valores de a y b 

Pregunta 25:
      Haciendo puts c se obtiene
       --#{a}--
       --#{b}--
       => nil
       Por tanto tenemos la definicion de un array multilinea

Pregunta 26:
       s[0,2]
          => "he"
      s[-1,1]
          => "o"
      s[0,10]
          => "hello"
Pregunta 27:
      => "helloworld", es decir añade world a la cadena hello

Pregunta 28:
        Multiplica el caracter entrecomillado simple por el numero es decir, "..."

Pregunta 29:
         el resultado es "2 2 2 " ejecuta la accion del hash y despues la operacion exterior (*3)

Pregunta 30:
       Convierte en cadenas distintas las cadenas dentro de corchetes tomando como caracter delimitador el espacio en blanco

Pregunta 31:
        Ejecuta el tabulado y el salto de linea

Pregunta 32: 
        tranforma el tabulado y salto de linea como cadena de caracteres

Pregunta 33:
        Crea un array con tres posiciones que no contienen nada [nil, nil, nil]

Pregunta 34:
         Crea un array de tres posiciones con valor inicial 0

Pregunta 35:
         Crea un array que contiene [[1, 2], [3, 4]]

Pregunta 36:
         Crea un array de tres elemento y en cada interacción multiplica el indice del vector por 2

Pregunta 37:
         a = ('a'..'e').to_a crea un array insertendo los elementos indicados por el intervalo.
         a[1,1]: muestra los elementos de la posicion 1 hasta la una en este caso muestra "b"
         a[0..2] muestra los elementos del intervalo
         a[0...1] muestra el elemento 0, no se especifica
         a[-2..-1]: muestra los elementos del intervalo, definiendo como -1 la ee y -2 la d.

Pregunta 38:
          a[0,2] = %w{A B}, sustituye los valores desde la posicion 0 hasta la 2, por los valores A y B: ["A", "B", "c", "d", "e"]
          a[2..5] = %w{C D E}: sustituye los valores definidos en el intervalo  por C D E.
          a[0,0] = [1,2,3]: inserta el vector definido en la posicion 0 del vector, es decir, [1, 2, 3, "A", "B", "C", "D", "E"]
          a[0,2] =[]: destruye los elementos definidos en el intervalo [3, "A", "B", "C", "D", "E"]
          a[-1,1] = ['Z'] inserta el elemento de derecha a izquierda segun el intervalo [3, "A", "B", "C", "D", "Z"]
           a[-2,2] = nil: sutituye por nil los valores indicador por el rando de derecha a izquierda [3, "A", "B", "C", nil]

Pregunta 39:
        a = (1...4).to_a: crea un vector de caracteres de 1 a n-1, siendo en este caso n = 4.
        a = a + [4,5]: añade al vector los elementos 4 y 5: [1, 2, 3, 4, 5]
        a += [[6, 7, 8]]: inserta los elementos del vector incluido los corchetes internos: [1, 2, 3, 4, 5, [6, 7, 8]]
        a = a + 9, no se puede hacer una conversion implicita.

Pregunta 40:
        %w{a b c b a}: crea un array con los elementos definidos, transformandonos en caddena ["a", "b", "c", "b", "a"]
        x = x - %w{b c d}: elimina los elementos  definidos, ["a", "a"]

Pregunta 41:
        z = [0]*8, crea un array de 8 elementos inicializados a 0, [0, 0, 0, 0, 0, 0, 0, 0]

Pregunta 42:
         a << 1: inserta el elemento 1
         a << 2 << 3: inserta los dos elementos en el array [1, 2, 3]
         a << [4, 5, 6] inserta el conjunto como un elemento del array  [1, 2, 3, [4, 5, 6]]
         a.concat [7, 8]: contatena los elementos definidos [1, 2, 3, [4, 5, 6], 7, 8]

Pregunta 43:
          c = a | b: inserta los elementos descartando los repetidos entre los dos vectores [1, 2, 3, 4, 5]
          d = b | a: inseta los elementos descartando los repetidos combinando b con a 
          e = a & b: inseta los elementos comunes de a y b en el vector e
          f = b & a: idem al anterior pero cambia el orden de los vectores, es decir, chequea utilizando b los elementos de a

Pregunta 44:
          b.to_a: crea el vector definidp en el rango con n-1  [1, 2, 3, 4, 5, 6, 7, 8, 9]
         b.include? 10: false, no existe dicho elemento
         b.include? 8: true, por lo tanto si existe dicho elemento
         b.step(2) {|x| print "#{x} "}: 1 3 5 7 9 => 1...10
         1..3.to_a: undefined method `to_a' for 3:Fixnum
        	from (irb):67
	        from /usr/bin/irb:12:in `<main>'

Pregunta 45:
          r.member? 50: true.
          r.include? 99.9: true.
          r.member? 99.9:  true.

Pregunto 46:
          true.class: TrueClass.
          false.class: FalseClass.
          puts "hello" if 0: hello.
          puts "hello" if nil: nil.
          puts "hello" if "": (irb):76: warning: string literal in condition
                                     hello
                                     => nil

Pregunta 47:
          x.class: Symbol.
          x == :sym : true.
          z = :'a log symbol' : :"a log symbol".
          z.class : Symbol
          x == 'sym'.to_sym : true.
          x.to_s == 'sym' : true.

Pregunta 48:
          print s : Rub=> nil.
          print s, t : RubJava=> nil

Pregunta 49:
          "%d %s" % [3, "rubies"] : "3 rubies".

Pregunta 50:
         x , y = 4, 5 : [4, 5]
         z = x > y ? x : y   : 5
         x,y,z = [1,2,3] : [1, 2, 3]
                            x = 1.
                            y = 2.
                            z = 3.

Pregunta 51:
         x.keys : [:a, :b].
         x.values : [1, 2].
         x[:c] =  3 : 3.
         x : {:a=>1, :b=>2, :c=>3}.
         x.delete('a') : nil
         x :  {:a=>1, :b=>2, :c=>3}
         x.delete(:a) : 1.
         x : {:b=>2, :c=>3}.
         x = { :a => 1, :b => 2, :c => 4 } : {:a=>1, :b=>2, :c=>4}.
         x.delete_if { |k,v| v % 2 == 0 } :  {:a=>1}.
         x :  {:a=>1}.

Pregunta 52:
      

Pregunta 53:
      ambos crea una tabla de tipo hash (:hash)

Pregunta 54:
      'hello world, hello LPP'.scan /\w+/ : crea un vector tomando como delimitador el espacio en blanco.

Pregunta 55>
        c = { :a => 3, :b => 2, :c => 1 } > crea un clase con las variables  {:a=>3, :b=>2, :c=>1}
        c.keys.sort.each { |k| puts c[k] } : muestra los valores de la variables de la clase.















 
